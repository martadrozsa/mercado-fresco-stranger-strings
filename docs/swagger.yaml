basePath: /api/v1
definitions:
  controllers.PurchaseOrdersCreate:
    properties:
      buyer_id:
        type: integer
      order_date:
        type: string
      order_number:
        type: string
      order_status_id:
        type: integer
      product_record_id:
        type: integer
      tracking_code:
        type: string
    required:
    - buyer_id
    - order_date
    - order_number
    - order_status_id
    - product_record_id
    - tracking_code
    type: object
  controllers.RequestCarryPost:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      locality_id:
        type: integer
      telephone:
        type: string
    required:
    - address
    - cid
    - company_name
    - locality_id
    - telephone
    type: object
  controllers.RequestInboundOrdersPost:
    properties:
      employee_id:
        type: integer
      order_date:
        type: string
      order_number:
        type: string
      product_batch_id:
        type: integer
      warehouse_id:
        type: integer
    required:
    - employee_id
    - order_date
    - order_number
    - product_batch_id
    - warehouse_id
    type: object
  controllers.RequestProductBatchPost:
    properties:
      batch_number:
        type: integer
      current_quantity:
        type: integer
      current_temperature:
        type: number
      due_date:
        type: string
      initial_quantity:
        type: integer
      manufacturing_date:
        type: string
      manufacturing_hour:
        type: integer
      minumum_temperature:
        type: number
      product_id:
        type: integer
      section_id:
        type: integer
    required:
    - batch_number
    - current_quantity
    - current_temperature
    - due_date
    - initial_quantity
    - manufacturing_date
    - manufacturing_hour
    - minumum_temperature
    - product_id
    - section_id
    type: object
  controllers.RequestProductPatch:
    properties:
      description:
        type: string
    required:
    - description
    type: object
  controllers.RequestProductPost:
    properties:
      description:
        type: string
      expiration_rate:
        type: number
      freezing_rate:
        type: number
      height:
        type: number
      length:
        type: number
      net_weight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    required:
    - description
    - expiration_rate
    - freezing_rate
    - height
    - length
    - net_weight
    - product_code
    - product_type_id
    - recommended_freezing_temperature
    - seller_id
    - width
    type: object
  controllers.RequestProductRecordsPost:
    properties:
      last_update_date:
        type: string
      product_id:
        type: integer
      purchase_price:
        type: number
      sale_price:
        type: number
    required:
    - last_update_date
    - product_id
    - purchase_price
    - sale_price
    type: object
  controllers.RequestWarehousePatch:
    properties:
      minimun_capacity:
        type: integer
      minimun_temperature:
        type: number
    required:
    - minimun_capacity
    - minimun_temperature
    type: object
  controllers.RequestWarehousePost:
    properties:
      address:
        type: string
      locality_id:
        type: integer
      minimun_capacity:
        type: integer
      minimun_temperature:
        type: number
      telephone:
        type: string
      warehouse_code:
        type: string
    required:
    - address
    - locality_id
    - minimun_capacity
    - minimun_temperature
    - telephone
    - warehouse_code
    type: object
  controllers.requestBuyerPatch:
    properties:
      card_number_id:
        type: string
      last_name:
        type: string
    required:
    - card_number_id
    - last_name
    type: object
  controllers.requestBuyerPost:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    required:
    - card_number_id
    - first_name
    - last_name
    type: object
  controllers.requestEmployeePatch:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  controllers.requestEmployeePost:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      warehouse_id:
        type: integer
    required:
    - card_number_id
    - first_name
    - last_name
    - warehouse_id
    type: object
  controllers.requestSectionPatch:
    properties:
      current_capacity:
        type: integer
    required:
    - current_capacity
    type: object
  controllers.requestSectionPost:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: number
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: number
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    required:
    - current_capacity
    - current_temperature
    - maximum_capacity
    - minimum_capacity
    - minimum_temperature
    - product_type_id
    - section_number
    - warehouse_id
    type: object
  controllers.requestSellerPatch:
    properties:
      address:
        type: string
      telephone:
        type: string
    required:
    - address
    - telephone
    type: object
  controllers.requestSellerPost:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      id:
        type: integer
      locality_id:
        type: integer
      telephone:
        type: string
    required:
    - address
    - cid
    - company_name
    - locality_id
    - telephone
    type: object
  domain.Buyer:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  domain.CarryModel:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      id:
        type: integer
      locality_id:
        type: integer
      telephone:
        type: string
    required:
    - address
    - cid
    - company_name
    - locality_id
    - telephone
    type: object
  domain.Employee:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      warehouse_id:
        type: integer
    type: object
  domain.InboundOrders:
    properties:
      employee_id:
        type: integer
      id:
        type: integer
      order_date:
        type: string
      order_number:
        type: string
      product_batch_id:
        type: integer
      warehouse_id:
        type: integer
    type: object
  domain.LocalityModel:
    properties:
      country_name:
        type: string
      id:
        type: integer
      locality_name:
        type: string
      province_id:
        type: integer
      province_name:
        type: string
    type: object
  domain.Product:
    properties:
      description:
        type: string
      expiration_rate:
        type: number
      freezing_rate:
        type: number
      height:
        type: number
      id:
        type: integer
      length:
        type: number
      net_weight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
  domain.ProductBatch:
    properties:
      batch_number:
        type: integer
      current_quantity:
        type: integer
      current_temperature:
        type: number
      due_date:
        type: string
      id:
        type: integer
      initial_quantity:
        type: integer
      manufacturing_date:
        type: string
      manufacturing_hour:
        type: integer
      minumum_temperature:
        type: number
      product_id:
        type: integer
      section_id:
        type: integer
    type: object
  domain.ProductRecords:
    properties:
      id:
        type: integer
      last_update_date:
        type: string
      product_id:
        type: integer
      purchase_price:
        type: number
      sale_price:
        type: number
    type: object
  domain.ProductRecordsReport:
    properties:
      description:
        type: string
      id:
        type: integer
      records_count:
        type: integer
    type: object
  domain.PurchaseOrders:
    properties:
      buyer_id:
        type: integer
      id:
        type: integer
      order_date:
        type: string
      order_number:
        type: string
      order_status_id:
        type: integer
      product_record_id:
        type: integer
      tracking_code:
        type: string
    type: object
  domain.PurchaseOrdersReport:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      purchase_orders_count:
        type: integer
    type: object
  domain.ReportProductsModel:
    properties:
      products_count:
        type: integer
      section_id:
        type: integer
      section_number:
        type: integer
    type: object
  domain.SectionModel:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: number
      id:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: number
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    type: object
  domain.Seller:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      id:
        type: integer
      locality_id:
        type: integer
      telephone:
        type: string
    type: object
  domain.WarehouseModel:
    properties:
      address:
        type: string
      id:
        type: integer
      locality_id:
        type: integer
      minimun_capacity:
        type: integer
      minimun_temperature:
        type: number
      telephone:
        type: string
      warehouse_code:
        type: string
    type: object
  httputil.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  locality.RequestLocalityPost:
    properties:
      country_name:
        type: string
      locality_name:
        type: string
      province_id:
        type: integer
      province_name:
        type: string
    required:
    - country_name
    - locality_name
    - province_name
    type: object
info:
  contact:
    name: API Support
    url: http://developers.mercadolibre.com.ar/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://developers.mercadolibre.com.ar/es_ar/terminos_y_condiciones
  title: Swagger Mercado Fresco
  version: "1.0"
paths:
  /buyers:
    get:
      consumes:
      - application/json
      description: get buyers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Buyer'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all buyers
      tags:
      - Buyers
    post:
      consumes:
      - application/json
      description: create buyer
      parameters:
      - description: Create buyer
        in: body
        name: Buyer
        required: true
        schema:
          $ref: '#/definitions/controllers.requestBuyerPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Buyer'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create buyer
      tags:
      - Buyers
  /buyers/{id}:
    delete:
      consumes:
      - application/json
      description: DeleteBuyer buyer by id
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: DeleteBuyer buyer
      tags:
      - Buyers
    get:
      consumes:
      - application/json
      description: get buyer by id
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Buyer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List buyer by id
      tags:
      - Buyers
    patch:
      consumes:
      - application/json
      description: Update UpdateCardNumberLastName field by id
      parameters:
      - description: Buyers ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update field
        in: body
        name: Buyer
        required: true
        schema:
          $ref: '#/definitions/controllers.requestBuyerPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Buyer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update UpdateCardNumberLastName
      tags:
      - Buyers
  /buyers/purchaseOrders:
    get:
      consumes:
      - application/json
      description: List all reports buyer records
      parameters:
      - description: Buyer ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.PurchaseOrdersReport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all report product records by id and list all report buyer records
      tags:
      - Buyers
  /carries:
    post:
      consumes:
      - application/json
      description: create carry
      parameters:
      - description: Create carry
        in: body
        name: carry
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestCarryPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.CarryModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create carry
      tags:
      - Carries
  /employees:
    get:
      consumes:
      - application/json
      description: get all employees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Employee'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all employees
      tags:
      - Employees
    post:
      consumes:
      - application/json
      description: create employee
      parameters:
      - description: Create employee
        in: body
        name: Employee
        required: true
        schema:
          $ref: '#/definitions/controllers.requestEmployeePost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Employee'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create employee
      tags:
      - Employees
  /employees/{id}:
    delete:
      consumes:
      - application/json
      description: Delete employee by id
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete employee
      tags:
      - Employees
    get:
      description: Get employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Get employee by ID
      tags:
      - Employees
    patch:
      consumes:
      - application/json
      description: Update employee first and last name field by id
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update field
        in: body
        name: Employee
        required: true
        schema:
          $ref: '#/definitions/controllers.requestEmployeePatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update employee fullname
      tags:
      - Employees
  /employees/reportInboundOrders:
    get:
      consumes:
      - application/json
      description: Inbound orders quantity by employee
      parameters:
      - description: Employee ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Report inbound orders employee
      tags:
      - Employees
  /inboundOrders:
    post:
      consumes:
      - application/json
      description: create inbound order
      parameters:
      - description: Create inbound orders
        in: body
        name: InboundOrders
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestInboundOrdersPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.InboundOrders'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create InboundOrder
      tags:
      - InboundOrders
  /localities:
    post:
      consumes:
      - application/json
      description: create localite
      parameters:
      - description: Create locality
        in: body
        name: Locality
        required: true
        schema:
          $ref: '#/definitions/locality.RequestLocalityPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.LocalityModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create locality
      tags:
      - Localities
  /localities/reportCarries:
    get:
      consumes:
      - application/json
      description: Report carries
      parameters:
      - description: locality ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Report carries
      tags:
      - Localities
  /localities/reportSellers:
    get:
      consumes:
      - application/json
      description: Report localities by seller
      parameters:
      - description: Seller ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Report localities by seller
      tags:
      - Localities
  /ping:
    get:
      description: Returns a successful pong answer to all HTTP requests
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Healthcheck endpoint
      tags:
      - misc
  /productBatches:
    post:
      consumes:
      - application/json
      description: create product batch
      parameters:
      - description: Create product batch
        in: body
        name: ProductBatch
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestProductBatchPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.ProductBatch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create product batch
      tags:
      - Product batches
  /productRecords:
    post:
      consumes:
      - application/json
      description: create product records
      parameters:
      - description: Create product records
        in: body
        name: ProductRecords
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestProductRecordsPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.ProductRecords'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create ProductRecords
      tags:
      - ProductRecords
  /products:
    get:
      consumes:
      - application/json
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: create product
      parameters:
      - description: Create product
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestProductPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete product
      tags:
      - Products
    get:
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Get product by ID
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update product description
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update field
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestProductPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update product fullname
      tags:
      - Products
  /purchaseOrders:
    post:
      consumes:
      - application/json
      description: create purchaseOrders
      parameters:
      - description: Create purchaseOrders
        in: body
        name: purchaseOrders
        required: true
        schema:
          $ref: '#/definitions/controllers.PurchaseOrdersCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.PurchaseOrders'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create purchaseOrders
      tags:
      - PurchaseOrders
  /reportRecords:
    get:
      consumes:
      - application/json
      description: List all reports product records
      parameters:
      - description: Product ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ProductRecordsReport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all report product records by id and list all report product records
      tags:
      - Products
  /sections:
    get:
      consumes:
      - application/json
      description: get sections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.SectionModel'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all sections
      tags:
      - Sections
    post:
      consumes:
      - application/json
      description: create section
      parameters:
      - description: Create section
        in: body
        name: Section
        required: true
        schema:
          $ref: '#/definitions/controllers.requestSectionPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.SectionModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create section
      tags:
      - Sections
  /sections/{id}:
    delete:
      consumes:
      - application/json
      description: Delete section by id
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete section
      tags:
      - Sections
    get:
      consumes:
      - application/json
      description: get section by id
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.SectionModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List section by id
      tags:
      - Sections
    patch:
      consumes:
      - application/json
      description: Update currentCapacity field by id
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update field
        in: body
        name: Section
        required: true
        schema:
          $ref: '#/definitions/controllers.requestSectionPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.SectionModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update currentCapacity
      tags:
      - Sections
  /sections/reportProducts:
    get:
      consumes:
      - application/json
      description: report products count by section
      parameters:
      - description: Section ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ReportProductsModel'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Report products
      tags:
      - Sections
  /sellers:
    get:
      consumes:
      - application/json
      description: get Seller
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Seller'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all seller
      tags:
      - Seller
    post:
      consumes:
      - application/json
      description: create seller
      parameters:
      - description: Create seller
        in: body
        name: Seller
        required: true
        schema:
          $ref: '#/definitions/controllers.requestSellerPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Seller'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create seller
      tags:
      - Seller
  /sellers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Seller by id
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete Seller
      tags:
      - Seller
    get:
      consumes:
      - application/json
      description: get Seller by id
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Seller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Seller by id
      tags:
      - Seller
    patch:
      consumes:
      - application/json
      description: Update seller
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update seller
        in: body
        name: Warehouse
        required: true
        schema:
          $ref: '#/definitions/controllers.requestSellerPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Seller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update seller
      tags:
      - Seller
  /warehouses:
    get:
      consumes:
      - application/json
      description: get Warehouse
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.WarehouseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all warehouse
      tags:
      - Warehouse
    post:
      consumes:
      - application/json
      description: create warehouse
      parameters:
      - description: Create warehouse
        in: body
        name: Warehouse
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestWarehousePost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.WarehouseModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create warehouse
      tags:
      - Warehouse
  /warehouses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Warehouse by id
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete Warehouse
      tags:
      - Warehouse
    get:
      consumes:
      - application/json
      description: get Warehouse by id
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.WarehouseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Warehouse by id
      tags:
      - Warehouse
    patch:
      consumes:
      - application/json
      description: Update warehouse
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update warehouse
        in: body
        name: Warehouse
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestWarehousePatch'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.WarehouseModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update warehouse
      tags:
      - Warehouse
swagger: "2.0"
