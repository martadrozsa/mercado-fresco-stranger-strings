basePath: /api/v1
definitions:
  buyer.Buyer:
    properties:
      card_number_id:
        type: integer
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  controllers.RequestWarehousePatch:
    properties:
      minimun_capacity:
        type: integer
      minimun_temperature:
        type: number
    type: object
  controllers.RequestWarehousePost:
    properties:
      address:
        type: string
      minimun_capacity:
        type: integer
      minimun_temperature:
        type: number
      telephone:
        type: string
      warehouse_code:
        type: string
    required:
    - address
    - minimun_capacity
    - minimun_temperature
    - telephone
    - warehouse_code
    type: object
  controllers.requestBuyerPatch:
    properties:
      card_number_id:
        type: integer
      last_name:
        type: string
    required:
    - card_number_id
    - last_name
    type: object
  controllers.requestBuyerPost:
    properties:
      card_number_id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
    required:
    - card_number_id
    - first_name
    - last_name
    type: object
  controllers.requestEmployeePatch:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  controllers.requestEmployeePost:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      warehouse_id:
        type: integer
    required:
    - card_number_id
    - first_name
    - last_name
    - warehouse_id
    type: object
  controllers.requestProductPatch:
    properties:
      description:
        type: string
    required:
    - description
    type: object
  controllers.requestProductPost:
    properties:
      description:
        type: string
      expiration_rate:
        type: number
      freezing_rate:
        type: integer
      height:
        type: number
      length:
        type: number
      net_weight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    required:
    - description
    - expiration_rate
    - freezing_rate
    - height
    - length
    - net_weight
    - product_code
    - product_type_id
    - recommended_freezing_temperature
    - seller_id
    - width
    type: object
  controllers.requestSectionPatch:
    properties:
      current_capacity:
        type: integer
    required:
    - current_capacity
    type: object
  controllers.requestSectionPost:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    required:
    - current_capacity
    - current_temperature
    - maximum_capacity
    - minimum_capacity
    - minimum_temperature
    - product_type_id
    - section_number
    - warehouse_id
    type: object
  controllers.requestSellerPatch:
    properties:
      address:
        type: string
      telephone:
        type: string
    required:
    - address
    - telephone
    type: object
  controllers.requestSellerPost:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      id:
        type: integer
      telephone:
        type: string
    required:
    - address
    - cid
    - company_name
    - telephone
    type: object
  employees.Employee:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      warehouse_id:
        type: integer
    type: object
  httputil.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  product.Product:
    properties:
      description:
        type: string
      expiration_rate:
        type: number
      freezing_rate:
        type: integer
      height:
        type: number
      id:
        type: integer
      length:
        type: number
      net_weight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
  section.Section:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: integer
      id:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    type: object
  seller.Seller:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      id:
        type: integer
      telephone:
        type: string
    type: object
  warehouse.WarehouseModel:
    properties:
      address:
        type: string
      id:
        type: integer
      minimun_capacity:
        type: integer
      minimun_temperature:
        type: number
      telephone:
        type: string
      warehouse_code:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: http://developers.mercadolibre.com.ar/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://developers.mercadolibre.com.ar/es_ar/terminos_y_condiciones
  title: Swagger Mercado Fresco
  version: "1.0"
paths:
  /buyers:
    get:
      consumes:
      - application/json
      description: get buyers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/buyer.Buyer'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all buyers
      tags:
      - Buyers
    post:
      consumes:
      - application/json
      description: create buyer
      parameters:
      - description: Create buyer
        in: body
        name: Buyer
        required: true
        schema:
          $ref: '#/definitions/controllers.requestBuyerPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/buyer.Buyer'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create buyer
      tags:
      - Buyers
  /buyers/{id}:
    delete:
      consumes:
      - application/json
      description: DeleteBuyer buyer by id
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: DeleteBuyer buyer
      tags:
      - Buyers
    get:
      consumes:
      - application/json
      description: get buyer by id
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/buyer.Buyer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List buyer by id
      tags:
      - Buyers
    patch:
      consumes:
      - application/json
      description: Update UpdateCardNumberLastName field by id
      parameters:
      - description: Buyers ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update field
        in: body
        name: Buyer
        required: true
        schema:
          $ref: '#/definitions/controllers.requestBuyerPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/buyer.Buyer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update UpdateCardNumberLastName
      tags:
      - Buyers
  /employees:
    get:
      consumes:
      - application/json
      description: get all employees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/employees.Employee'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all employees
      tags:
      - Employees
    post:
      consumes:
      - application/json
      description: create employee
      parameters:
      - description: Create employee
        in: body
        name: Employee
        required: true
        schema:
          $ref: '#/definitions/controllers.requestEmployeePost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/employees.Employee'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create employee
      tags:
      - Employees
  /employees/{id}:
    delete:
      consumes:
      - application/json
      description: Delete employee by id
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete employee
      tags:
      - Employees
    get:
      description: Get employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/employees.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Get employee by ID
      tags:
      - Employees
    patch:
      consumes:
      - application/json
      description: Update employee first and last name field by id
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update field
        in: body
        name: Employee
        required: true
        schema:
          $ref: '#/definitions/controllers.requestEmployeePatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/employees.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update employee fullname
      tags:
      - Employees
  /products:
    get:
      consumes:
      - application/json
      description: get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Product'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: create product
      parameters:
      - description: Create product
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/controllers.requestProductPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete product
      tags:
      - Products
    get:
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Get product by ID
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update product description
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update field
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/controllers.requestProductPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update product fullname
      tags:
      - Products
  /sections:
    get:
      consumes:
      - application/json
      description: get sections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/section.Section'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all sections
      tags:
      - Sections
    post:
      consumes:
      - application/json
      description: create section
      parameters:
      - description: Create section
        in: body
        name: Section
        required: true
        schema:
          $ref: '#/definitions/controllers.requestSectionPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/section.Section'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create section
      tags:
      - Sections
  /sections/{id}:
    delete:
      consumes:
      - application/json
      description: Delete section by id
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete section
      tags:
      - Sections
    get:
      consumes:
      - application/json
      description: get section by id
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/section.Section'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List section by id
      tags:
      - Sections
    patch:
      consumes:
      - application/json
      description: Update currentCapacity field by id
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update field
        in: body
        name: Section
        required: true
        schema:
          $ref: '#/definitions/controllers.requestSectionPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/section.Section'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update currentCapacity
      tags:
      - Sections
  /sellers:
    get:
      consumes:
      - application/json
      description: get Seller
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/seller.Seller'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all seller
      tags:
      - Seller
    post:
      consumes:
      - application/json
      description: create seller
      parameters:
      - description: Create seller
        in: body
        name: Seller
        required: true
        schema:
          $ref: '#/definitions/controllers.requestSellerPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/seller.Seller'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create seller
      tags:
      - Seller
  /sellers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Seller by id
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete Seller
      tags:
      - Seller
    get:
      consumes:
      - application/json
      description: get Seller by id
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/seller.Seller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Seller by id
      tags:
      - Seller
    patch:
      consumes:
      - application/json
      description: Update seller
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update seller
        in: body
        name: Warehouse
        required: true
        schema:
          $ref: '#/definitions/controllers.requestSellerPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/seller.Seller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update seller
      tags:
      - Seller
  /warehouses:
    get:
      consumes:
      - application/json
      description: get Warehouse
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/warehouse.WarehouseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List all warehouse
      tags:
      - Warehouse
    post:
      consumes:
      - application/json
      description: create warehouse
      parameters:
      - description: Create warehouse
        in: body
        name: Warehouse
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestWarehousePost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/warehouse.WarehouseModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create warehouse
      tags:
      - Warehouse
  /warehouses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Warehouse by id
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete Warehouse
      tags:
      - Warehouse
    get:
      consumes:
      - application/json
      description: get Warehouse by id
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/warehouse.WarehouseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Warehouse by id
      tags:
      - Warehouse
    patch:
      consumes:
      - application/json
      description: Update warehouse
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update warehouse
        in: body
        name: Warehouse
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestWarehousePatch'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/warehouse.WarehouseModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update warehouse
      tags:
      - Warehouse
swagger: "2.0"
