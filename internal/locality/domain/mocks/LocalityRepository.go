// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/vinigracindo/mercado-fresco-stranger-strings/internal/locality/domain"
)

// LocalityRepository is an autogenerated mock type for the LocalityRepository type
type LocalityRepository struct {
	mock.Mock
}

// CreateLocality provides a mock function with given fields: ctx, locality
func (_m *LocalityRepository) CreateLocality(ctx context.Context, locality *domain.LocalityModel) (*domain.LocalityModel, error) {
	ret := _m.Called(ctx, locality)

	var r0 *domain.LocalityModel
	if rf, ok := ret.Get(0).(func(context.Context, *domain.LocalityModel) *domain.LocalityModel); ok {
		r0 = rf(ctx, locality)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LocalityModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.LocalityModel) error); ok {
		r1 = rf(ctx, locality)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReportSeller provides a mock function with given fields: ctx
func (_m *LocalityRepository) GetAllReportSeller(ctx context.Context) (*[]domain.ReportSeller, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.ReportSeller
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.ReportSeller); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.ReportSeller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *LocalityRepository) GetById(ctx context.Context, id int64) (*domain.LocalityModel, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.LocalityModel
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.LocalityModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LocalityModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateCountry provides a mock function with given fields: ctx, countryName
func (_m *LocalityRepository) GetOrCreateCountry(ctx context.Context, countryName string) (int64, error) {
	ret := _m.Called(ctx, countryName)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, countryName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, countryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateProvince provides a mock function with given fields: ctx, countryId, provinceName
func (_m *LocalityRepository) GetOrCreateProvince(ctx context.Context, countryId int64, provinceName string) (int64, error) {
	ret := _m.Called(ctx, countryId, provinceName)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) int64); ok {
		r0 = rf(ctx, countryId, provinceName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, countryId, provinceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportCarrie provides a mock function with given fields: ctx, id
func (_m *LocalityRepository) ReportCarrie(ctx context.Context, id int64) (*[]domain.ReportCarrie, error) {
	ret := _m.Called(ctx, id)

	var r0 *[]domain.ReportCarrie
	if rf, ok := ret.Get(0).(func(context.Context, int64) *[]domain.ReportCarrie); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.ReportCarrie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLocalityRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLocalityRepository creates a new instance of LocalityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLocalityRepository(t mockConstructorTestingTNewLocalityRepository) *LocalityRepository {
	mock := &LocalityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
