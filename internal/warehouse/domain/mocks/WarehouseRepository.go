// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	warehouse "github.com/vinigracindo/mercado-fresco-stranger-strings/internal/warehouse/domain"
)

// WarehouseRepository is an autogenerated mock type for the WarehouseRepository type
type WarehouseRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, wr
func (_m *WarehouseRepository) Create(ctx context.Context, wr *warehouse.WarehouseModel) (warehouse.WarehouseModel, error) {
	ret := _m.Called(ctx, wr)

	var r0 warehouse.WarehouseModel
	if rf, ok := ret.Get(0).(func(context.Context, *warehouse.WarehouseModel) warehouse.WarehouseModel); ok {
		r0 = rf(ctx, wr)
	} else {
		r0 = ret.Get(0).(warehouse.WarehouseModel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *warehouse.WarehouseModel) error); ok {
		r1 = rf(ctx, wr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *WarehouseRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *WarehouseRepository) GetAll(ctx context.Context) ([]warehouse.WarehouseModel, error) {
	ret := _m.Called(ctx)

	var r0 []warehouse.WarehouseModel
	if rf, ok := ret.Get(0).(func(context.Context) []warehouse.WarehouseModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]warehouse.WarehouseModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *WarehouseRepository) GetById(ctx context.Context, id int64) (warehouse.WarehouseModel, error) {
	ret := _m.Called(ctx, id)

	var r0 warehouse.WarehouseModel
	if rf, ok := ret.Get(0).(func(context.Context, int64) warehouse.WarehouseModel); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(warehouse.WarehouseModel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, wh
func (_m *WarehouseRepository) Update(ctx context.Context, id int64, wh *warehouse.WarehouseModel) (warehouse.WarehouseModel, error) {
	ret := _m.Called(ctx, id, wh)

	var r0 warehouse.WarehouseModel
	if rf, ok := ret.Get(0).(func(context.Context, int64, *warehouse.WarehouseModel) warehouse.WarehouseModel); ok {
		r0 = rf(ctx, id, wh)
	} else {
		r0 = ret.Get(0).(warehouse.WarehouseModel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *warehouse.WarehouseModel) error); ok {
		r1 = rf(ctx, id, wh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWarehouseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWarehouseRepository creates a new instance of WarehouseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehouseRepository(t mockConstructorTestingTNewWarehouseRepository) *WarehouseRepository {
	mock := &WarehouseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
