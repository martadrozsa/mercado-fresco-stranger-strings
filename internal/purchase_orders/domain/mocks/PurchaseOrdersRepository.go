// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/vinigracindo/mercado-fresco-stranger-strings/internal/purchase_orders/domain"

	time "time"
)

// PurchaseOrdersRepository is an autogenerated mock type for the PurchaseOrdersRepository type
type PurchaseOrdersRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, OrderNumber, OrderDate, TrackingCode, BuyerId, ProductRecordId, OrderStatusId
func (_m *PurchaseOrdersRepository) Create(ctx context.Context, OrderNumber string, OrderDate time.Time, TrackingCode string, BuyerId int64, ProductRecordId int64, OrderStatusId int64) (*domain.PurchaseOrders, error) {
	ret := _m.Called(ctx, OrderNumber, OrderDate, TrackingCode, BuyerId, ProductRecordId, OrderStatusId)

	var r0 *domain.PurchaseOrders
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, string, int64, int64, int64) *domain.PurchaseOrders); ok {
		r0 = rf(ctx, OrderNumber, OrderDate, TrackingCode, BuyerId, ProductRecordId, OrderStatusId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PurchaseOrders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, string, int64, int64, int64) error); ok {
		r1 = rf(ctx, OrderNumber, OrderDate, TrackingCode, BuyerId, ProductRecordId, OrderStatusId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPurchaseOrdersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPurchaseOrdersRepository creates a new instance of PurchaseOrdersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPurchaseOrdersRepository(t mockConstructorTestingTNewPurchaseOrdersRepository) *PurchaseOrdersRepository {
	mock := &PurchaseOrdersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
