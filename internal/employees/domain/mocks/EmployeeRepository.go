// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/vinigracindo/mercado-fresco-stranger-strings/internal/employees/domain"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, cardNumberId, firstName, lastName, warehouseId
func (_m *EmployeeRepository) Create(ctx context.Context, cardNumberId string, firstName string, lastName string, warehouseId int64) (domain.Employee, error) {
	ret := _m.Called(ctx, cardNumberId, firstName, lastName, warehouseId)

	var r0 domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) domain.Employee); ok {
		r0 = rf(ctx, cardNumberId, firstName, lastName, warehouseId)
	} else {
		r0 = ret.Get(0).(domain.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int64) error); ok {
		r1 = rf(ctx, cardNumberId, firstName, lastName, warehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EmployeeRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *EmployeeRepository) GetAll(ctx context.Context) ([]domain.Employee, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Employee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReportInboundOrders provides a mock function with given fields: ctx
func (_m *EmployeeRepository) GetAllReportInboundOrders(ctx context.Context) ([]domain.EmployeeInboundOrdersReport, error) {
	ret := _m.Called(ctx)

	var r0 []domain.EmployeeInboundOrdersReport
	if rf, ok := ret.Get(0).(func(context.Context) []domain.EmployeeInboundOrdersReport); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.EmployeeInboundOrdersReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *EmployeeRepository) GetById(ctx context.Context, id int64) (*domain.Employee, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportInboundOrdersById provides a mock function with given fields: ctx, employeeID
func (_m *EmployeeRepository) GetReportInboundOrdersById(ctx context.Context, employeeID int64) (domain.EmployeeInboundOrdersReport, error) {
	ret := _m.Called(ctx, employeeID)

	var r0 domain.EmployeeInboundOrdersReport
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.EmployeeInboundOrdersReport); ok {
		r0 = rf(ctx, employeeID)
	} else {
		r0 = ret.Get(0).(domain.EmployeeInboundOrdersReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, employeeID, updatedEmployee
func (_m *EmployeeRepository) Update(ctx context.Context, employeeID int64, updatedEmployee domain.Employee) error {
	ret := _m.Called(ctx, employeeID, updatedEmployee)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Employee) error); ok {
		r0 = rf(ctx, employeeID, updatedEmployee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewEmployeeRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmployeeRepository creates a new instance of EmployeeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmployeeRepository(t NewEmployeeRepositoryT) *EmployeeRepository {
	mock := &EmployeeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
