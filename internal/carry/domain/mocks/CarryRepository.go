// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/vinigracindo/mercado-fresco-stranger-strings/internal/carry/domain"
)

// CarryRepository is an autogenerated mock type for the CarryRepository type
type CarryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, carry
func (_m *CarryRepository) Create(ctx context.Context, carry *domain.CarryModel) (*domain.CarryModel, error) {
	ret := _m.Called(ctx, carry)

	var r0 *domain.CarryModel
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CarryModel) *domain.CarryModel); ok {
		r0 = rf(ctx, carry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CarryModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.CarryModel) error); ok {
		r1 = rf(ctx, carry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *CarryRepository) GetById(ctx context.Context, id int64) (*domain.CarryModel, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.CarryModel
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.CarryModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CarryModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCarryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCarryRepository creates a new instance of CarryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCarryRepository(t mockConstructorTestingTNewCarryRepository) *CarryRepository {
	mock := &CarryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
