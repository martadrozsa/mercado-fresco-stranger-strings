// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	section "github.com/vinigracindo/mercado-fresco-stranger-strings/internal/domains/section"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseId, productTypeId
func (_m *Service) Create(sectionNumber int64, currentTemperature int64, minimumTemperature int64, currentCapacity int64, minimumCapacity int64, maximumCapacity int64, warehouseId int64, productTypeId int64) (section.Section, error) {
	ret := _m.Called(sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseId, productTypeId)

	var r0 section.Section
	if rf, ok := ret.Get(0).(func(int64, int64, int64, int64, int64, int64, int64, int64) section.Section); ok {
		r0 = rf(sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseId, productTypeId)
	} else {
		r0 = ret.Get(0).(section.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int64, int64, int64, int64, int64, int64) error); ok {
		r1 = rf(sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseId, productTypeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() ([]section.Section, error) {
	ret := _m.Called()

	var r0 []section.Section
	if rf, ok := ret.Get(0).(func() []section.Section); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]section.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *Service) GetById(id int64) (section.Section, error) {
	ret := _m.Called(id)

	var r0 section.Section
	if rf, ok := ret.Get(0).(func(int64) section.Section); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(section.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCurrentCapacity provides a mock function with given fields: id, currentCapacity
func (_m *Service) UpdateCurrentCapacity(id int64, currentCapacity int64) (section.Section, error) {
	ret := _m.Called(id, currentCapacity)

	var r0 section.Section
	if rf, ok := ret.Get(0).(func(int64, int64) section.Section); ok {
		r0 = rf(id, currentCapacity)
	} else {
		r0 = ret.Get(0).(section.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(id, currentCapacity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
