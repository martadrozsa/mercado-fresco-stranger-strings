// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/vinigracindo/mercado-fresco-stranger-strings/internal/product_records/domain"
)

// ProductRecordsService is an autogenerated mock type for the ProductRecordsService type
type ProductRecordsService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, productRecords
func (_m *ProductRecordsService) Create(ctx context.Context, productRecords *domain.ProductRecords) (*domain.ProductRecords, error) {
	ret := _m.Called(ctx, productRecords)

	var r0 *domain.ProductRecords
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ProductRecords) *domain.ProductRecords); ok {
		r0 = rf(ctx, productRecords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductRecords)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.ProductRecords) error); ok {
		r1 = rf(ctx, productRecords)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductRecordsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRecordsService creates a new instance of ProductRecordsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRecordsService(t mockConstructorTestingTNewProductRecordsService) *ProductRecordsService {
	mock := &ProductRecordsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
